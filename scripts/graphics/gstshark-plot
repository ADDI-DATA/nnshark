#! /bin/bash

# Ridgerun GstShark

# Display help message
if [ $1 == "--help" ]
then
    echo "Ridgerun Gstshark"
    echo
    echo "usage : $0 DIR [options]"
    echo
    echo "  DIR                            Input trace directory"
    echo "  --help                         This help message"
    echo "  -s, --savefig [pdf|png]         Save the graphics generated"
    echo "                                 FORMAT: Output file format, png or pdf"
    echo "                                 (default: pdf)"
    echo "  -p, --persist                  keep octave console open"
    echo "  -l, --legend <inside|outside>  Indicate the position of the legend"
    echo "                                 over each graphic generated"
    echo "                                 (default: inside)"
    echo
    exit
fi

# Verify if there is at least a parameter
if [ $# -lt 1 ]
then
    echo "Error: A directory name must be given"
    echo "Try '$0 --help' for more information."
    exit
fi

if [ ! -d $1 ]
then
    echo "Error: $1 is not a directory"
    echo "Try '$0 --help' for more information."
    exit
fi

processing_tracer_list=("proctime" "interlatency" "framerate" "scheduling" "cpuusage")
parser_group_list1=("proctime" "interlatency" "framerate" "scheduling")

#
rm -f tracer.pdf

# Create readable file
babeltrace $1 > datastream.log

# Loop through the tracer list
for tracer in "${parser_group_list1[@]}"
do
    echo "Loading ${tracer} events..."
    # Split the events in files
    grep -w ${tracer} datastream.log > ${tracer}.log
    # Get data columns
    awk '{print $1,$10,$13,$16}' ${tracer}.log > ${tracer}.mat
    # Create plots
done

echo "Loading cpuusage events..."
# Create readable file
babeltrace $1 > datastream.log
# Split the events in files
grep -w cpuusage datastream.log > cpuusage.log
# Get data columns
awk '{print $1,$10,$13,$16,$19,$22,$25,$28,$31}' cpuusage.log > cpuusage.mat

# Skip directory name
shift

# Parse options
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -s|--savefig)
        SAVEFIG="--savefig"
        shift # past argument

        key="$1"
        case $key in
            png)
            FORMAT="png"
            shift
            ;;
            pdf)
            FORMAT="pdf"
            shift
            ;;
        esac
        ;;
        -l|--legend)
        #~ SAVEFIG="--savefig"
        shift # past argument

        key="$1"
        case $key in
            outside)
            LEGEND="northeastoutside"
            shift
            ;;
            inside)
            LEGEND="northeast"
            shift
            ;;
        esac
        ;;
        -p|--persist)
        PERSIST="--persist"
        shift # past argument
        ;;
        *)
        echo "WARN: unkown \"$key\" option"
        shift
        ;;
    esac
done

# Create plots
octave -qf ${PERSIST} ./gstshark-plot.m "${processing_tracer_list[@]}" "${SAVEFIG}" "${FORMAT}" "${LEGEND}"

# Remove files
for tracer in "${tracer_list[@]}"
do
    rm ${tracer}.log ${tracer}.mat -f
done
rm -f datastream.log

